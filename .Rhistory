###### Run this whole block together each time
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = NULL)
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08)
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1)
circos.genomicAxis()
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
###### Run this whole block together each time
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = c('axis'))
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08)
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1)
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
######
test <- read_tsv('../_VenomGeneRegulation_OLD/misc/Circos_plots/data/SVMP/Gene_expression/VG1DPE_AvgExpression_log2.bedgraph')
test <- read_tsv('../_VenomGeneRegulation_OLD/misc/Circos_plots/data/SVMP/Gene_expression/VG1DPE_AvgExpression_log2.bedgraph',col_names = c('chr','start','end','expression'))
circos.genomicLines(test)
###### Run this whole block together each time
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = c('axis'))
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08)
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1)
circos.genomicLines(test)
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
######
circos.genomicLines(region = test[,2:3],value = test$expression)
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = c('axis'))
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08)
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1)
circos.genomicLines(region = test[,2:3],value = test$expression)
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
######
###### Run this whole block together each time
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = c('axis'))
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08,panel.fun = function(x, y) {
circos.genomicAxis(h = "bottom", direction = "inside")}
)
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1)
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
######
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = NULL)
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08,panel.fun = function(x, y) {
circos.genomicAxis(h = "bottom", direction = "inside")}
)
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1)
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
######
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = NULL)
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08,panel.fun = function(x, y) {
circos.genomicAxis(h = "bottom", direction = "inside")}
)
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1,line_lwd = 0)
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
######
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = NULL)
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08,panel.fun = function(x, y) {
circos.genomicAxis(h = "bottom", direction = "inside",labels.cex = 1)}
)
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1,line_lwd = 0)
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
######
###### Run this whole block together each time
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = NULL)
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08,panel.fun = function(x, y) {
circos.genomicAxis(h = "bottom", direction = "inside",labels.cex = 0.05)}
)
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1,line_lwd = 0)
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
######
###### Run this whole block together each time
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = NULL)
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08,panel.fun = function(x, y) {
circos.genomicAxis(h = "bottom", direction = "inside",labels.cex = 0.5)}
)
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1,line_lwd = 0)
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
######
cvv.exp <- read_tsv('analysis/1_gene_expression/norm_counts/CvvVenomReg_RepRNAseq_wNonVen_VSTNormCounts_08.02.21.csv')
cvv.exp <- read_csv('analysis/1_gene_expression/norm_counts/CvvVenomReg_RepRNAseq_wNonVen_VSTNormCounts_08.02.21.csv')
cvv.exp <- read_csv('analysis/1_gene_expression/norm_counts/CvvVenomReg_RepRNAseq_wNonVen_VSTNormCounts_08.02.21.csv') %>%
mutate(avg1DPE = rowMeans(.[,c(4,8,9)]))
View(cvv.exp)
cvv.exp <- read_csv('analysis/1_gene_expression/norm_counts/CvvVenomReg_RepRNAseq_wNonVen_VSTNormCounts_08.02.21.csv') %>%
mutate(avg1DPE = rowMeans(.[,c(4,8,9)])) %>%
select(txid = 1, avg1DPE)
cvv.exp <- read_csv('analysis/1_gene_expression/norm_counts/CvvVenomReg_RepRNAseq_wNonVen_VSTNormCounts_08.02.21.csv') %>%
mutate(avg1DPE = rowMeans(.[,c(4,8,9)])) %>%
select(txid = 1, avg1DPE) %>%
mutate(txid = str_split_fixed(txid,'[_]',2)[,2])
cvv.gff <- read_tsv('data/annotation/CroVir_rnd1.all.maker.final.homologIDs.updatedNov2019.GeneEntriesOnly.gff')
cvv.gff <- read_tsv('data/annotation/CroVir_rnd1.all.maker.final.homologIDs.updatedNov2019.GeneEntriesOnly.gff',col_names = F)
View(cvv.gff)
cvv.gff <- read_tsv('data/annotation/CroVir_rnd1.all.maker.final.homologIDs.updatedNov2019.GeneEntriesOnly.gff',col_names = F) %>%
select(chr=1,start=4,end=5,desc=9)
cvv.gff <- read_tsv('data/annotation/CroVir_rnd1.all.maker.final.homologIDs.updatedNov2019.GeneEntriesOnly.gff',col_names = F) %>%
select(chr=1,start=4,end=5,desc=9) %>%
mutate(txid = str_split_fixed(desc,'[;]',4)[,3])
cvv.gff <- read_tsv('data/annotation/CroVir_rnd1.all.maker.final.homologIDs.updatedNov2019.GeneEntriesOnly.gff',col_names = F) %>%
select(chr=1,start=4,end=5,desc=9) %>%
filter(str_detect(desc,'trnascan',negate = T)) %>%
mutate(txid = str_split_fixed(desc,'[;]',4)[,3])
cvv.gff <- read_tsv('data/annotation/CroVir_rnd1.all.maker.final.homologIDs.updatedNov2019.GeneEntriesOnly.gff',col_names = F) %>%
select(chr=1,start=4,end=5,desc=9) %>%
filter(str_detect(desc,'trnascan',negate = T)) %>%
mutate(txid = str_split_fixed(desc,'[;]',4)[,3]) %>%
mutate(txid = str_remove(txid,'Crovir_Transcript_ID=c'))
cvv.gff <- read_tsv('data/annotation/CroVir_rnd1.all.maker.final.homologIDs.updatedNov2019.GeneEntriesOnly.gff',col_names = F) %>%
select(chr=1,start=4,end=5,desc=9) %>%
filter(str_detect(desc,'trnascan',negate = T)) %>%
mutate(txid = str_split_fixed(desc,'[;]',4)[,3]) %>%
mutate(txid = str_remove(txid,'Crovir_Transcript_ID='))
cvv.gff <- read_tsv('data/annotation/CroVir_rnd1.all.maker.final.homologIDs.updatedNov2019.GeneEntriesOnly.gff',col_names = F) %>%
select(chr=1,start=4,end=5,desc=9) %>%
filter(str_detect(desc,'trnascan',negate = T)) %>%
mutate(txid = str_split_fixed(desc,'[;]',4)[,3]) %>%
mutate(txid = str_remove(txid,'Crovir_Transcript_ID=')) %>%
select(1,2,3,5)
cvv.exp.gff <- cvv.exp %>%
left_join(cvv.gff)
View(cvv.exp.gff)
cvv.exp.gff <- cvv.exp %>%
left_join(cvv.gff) %>%
select(chr,start,end,avg1DPE)
cvv.exp.gff <- cvv.exp %>%
left_join(cvv.gff) %>%
select(chr,start,end,avg1DPE) %>%
left_join(cvv.chroms,by=c('chr'='old_id'))
cvv.exp.gff <- cvv.exp %>%
left_join(cvv.gff) %>%
left_join(cvv.chroms,by=c('chr'='old_id'))
cvv.exp.gff <- cvv.exp %>%
left_join(cvv.gff) %>%
left_join(cvv.chroms,by=c('chr'='old_id')) %>%
select(chr = 6, start=4, end=5, avg1DPE)
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = NULL)
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08,panel.fun = function(x, y) {
circos.genomicAxis(h = "bottom", direction = "inside",labels.cex = 0.5)}
)
genomicLines(cvv.exp.gff)
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1,line_lwd = 0)
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
######
###### Run this whole block together each time
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = NULL)
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08,panel.fun = function(x, y) {
circos.genomicAxis(h = "bottom", direction = "inside",labels.cex = 0.5)}
)
circos.genomicLines(cvv.exp.gff)
circos.genomicLines(cvv.exp.gff,value = cvv.exp.gff$avg1DPE)
circos.genomicLines(sector.index = cvv.exp.gff$chr,x=mean(c(cvv.exp.gff$start,cvv.exp.gff$end)),y = cvv.exp.gff$avg1DPE)
circos.genomicLines(region=cvv.exp.gff)
circos.genomicLines(region=cvv.exp.gff,value = 1)
###### Run this whole block together each time
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = NULL)
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08,panel.fun = function(x, y) {
circos.genomicAxis(h = "bottom", direction = "inside",labels.cex = 0.5)}
)
circos.genomicTrackPlotRegion(data, panel.fun = function(region, value, ...) {
circos.genomicPoints(region, value)
})
circos.genomicPoints(cvv.exp.gff, value)
circos.genomicPoints(cvv.exp.gff, cvv.exp.gff$avg1DPE)
circos.genomicTrackPlotRegion(cvv.exp.gff, panel.fun = function(region, value, ...) {
circos.genomicPoints(cvv.exp.gff, cvv.exp.gff$avg1DPE)
})
###### Run this whole block together each time
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = NULL)
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08,panel.fun = function(x, y) {
circos.genomicAxis(h = "bottom", direction = "inside",labels.cex = 0.5)}
)
circos.genomicTrackPlotRegion(cvv.exp.gff, panel.fun = function(region, value, ...) {
circos.genomicPoints(cvv.exp.gff, cvv.exp.gff$avg1DPE)
})
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1,line_lwd = 0)
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
circos.par(start.degree=90,gap.degree=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10))
circos.genomicInitialize(cvv.chroms,plotType = NULL)
circos.track(ylim = c(0, 1),
bg.col = cvv.chroms$color,
bg.border = 'black', track.height = 0.08,panel.fun = function(x, y) {
circos.genomicAxis(h = "bottom", direction = "inside",labels.cex = 0.5)}
)
circos.genomicTrackPlotRegion(cvv.exp.gff, panel.fun = function(region, value, ...) {
circos.genomicLines(cvv.exp.gff, cvv.exp.gff$avg1DPE)
})
circos.genomicLabels(cvv.chroms, labels.column = 1, side = "inside",niceFacing = T,cex = 1,line_lwd = 0)
# circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
#   chr = CELL_META$sector.index
#   xlim = CELL_META$xlim
#   ylim = CELL_META$ylim
#   circos.rect(xlim[1], 0, xlim[2], 1, col = c('green','white'))
#   circos.text(mean(xlim), mean(ylim), chr, cex = 0.7, col = "black",
#               facing = "inside", niceFacing = TRUE)
# }, track.height = 0.15, bg.border = NA)
circos.clear()
######
library(tidyverse)
library(ggvenn)
install.packages("ggvenn")
library(ggvenn)
mergedPeaks <- read_tsv('analysis/4_atacseq/peak_regions/merged_peaks/mergedPeakIntersects.txt')
mergedPeaks <- read_tsv('analysis/4_atacseq/peak_regions/merged_peaks/mergedPeakIntersects.txt',col_names = F)
View(mergedPeaks)
mergedPeaks <- read_tsv('analysis/4_atacseq/peak_regions/merged_peaks/mergedPeakIntersects.txt',col_names = F) %>%
mutate(peakID = paste(1,2,3,sep = '_'))
mergedPeaks <- read_tsv('analysis/4_atacseq/peak_regions/merged_peaks/mergedPeakIntersects.txt',col_names = F) %>%
mutate(peakID = paste(X1,X2,X3,sep = '_'))
mergedPeaks <- read_tsv('analysis/4_atacseq/peak_regions/merged_peaks/mergedPeakIntersects.txt',col_names = F) %>%
mutate(peakID = paste(X1,X2,X3,sep = '_')) %>%
select(peakID, sample = 8)
mergedPeaks <- read_tsv('analysis/4_atacseq/peak_regions/merged_peaks/mergedPeakIntersects.txt',col_names = F) %>%
mutate(peakID = paste(X1,X2,X3,sep = '_')) %>%
select(peakID, sample = 8) %>%
mutate(sample = str_split_fixed(sample,'[_]',2)[,1])
mergedPeaks <- read_tsv('analysis/4_atacseq/peak_regions/merged_peaks/mergedPeakIntersects.txt',col_names = F) %>%
mutate(peakID = paste(X1,X2,X3,sep = '_')) %>%
select(peakID, sample = 8) %>%
mutate(sample = str_split_fixed(sample,'[_]',2)[,1]) %>%
unique()
rvg1.peaks <- mergedPeaks %>%
filter(sample == 'RVG1') %>%
select(peakID)
rvg4.peaks <- mergedPeaks %>%
filter(sample == 'RVG4') %>%
select(peakID)
rvg11.peaks <- mergedPeaks %>%
filter(sample == 'RVG11') %>%
select(peakID)
peak.overlap <- list('RVG1'=rvg1.peaks$peakID,'RVG4'=rvg4.peaks$peakID,'RVG11'=rvg11.peaks$peakID)
ggvenn(peak.overlap)
ggvenn(peak.overlap,fill_color = c('white'))
ggvenn(peak.overlap,fill_color = 'white')
ggvenn(peak.overlap,fill_color = c('white','grey','black'))
ggvenn(peak.overlap)
library(tidyverse)
library(ggvenn)
# a <- list(`Set 1` = c(1, 3, 5, 7, 9),
#           `Set 2` = c(1, 5, 9, 13),
#           `Set 3` = c(1, 2, 8, 9),
#           `Set 4` = c(6, 7, 10, 12))
# ggvenn(a, c("Set 1", "Set 2"))            # draw two-set venn
# ggvenn(a, c("Set 1", "Set 2", "Set 3"))   # draw three-set venn
# ggvenn(a)   # without set names, the first 4 elements in list will be chose to draw four-set venn
mergedPeaks <- read_tsv('analysis/4_atacseq/peak_regions/merged_peaks/mergedPeakIntersects.txt',col_names = F) %>%
mutate(peakID = paste(X1,X2,X3,sep = '_')) %>%
select(peakID, sample = 8) %>%
mutate(sample = str_split_fixed(sample,'[_]',2)[,1])
rvg1.peaks <- mergedPeaks %>%
filter(sample == 'RVG1') %>%
select(peakID)
rvg4.peaks <- mergedPeaks %>%
filter(sample == 'RVG4') %>%
select(peakID)
rvg11.peaks <- mergedPeaks %>%
filter(sample == 'RVG11') %>%
select(peakID)
ggvenn(peak.overlap,)
peak.overlap <- list('RVG1'=rvg1.peaks$peakID,'RVG4'=rvg4.peaks$peakID,'RVG11'=rvg11.peaks$peakID)
ggvenn(peak.overlap,)
focalPeaks <-
mergedPeaks %>%
group_by(peakID) %>%
tally()
View(focalPeaks)
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
tally() %>%
filter(n > 1)
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
tally() %>%
filter(n > 1) %>%
select(1)
View(focalPeaks)
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
# tally() %>%
# filter(n > 1) %>%
# select(1)
mutate(test = count())
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
# tally() %>%
# filter(n > 1) %>%
# select(1)
mutate(test = count(peakID))
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
# tally() %>%
# filter(n > 1) %>%
# select(1)
add_tally()
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
add_tally() %>%
?nest()
?nest()
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
add_tally() %>%
nest(peakID)
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
add_tally() %>%
nest(samples=sample)
View(focalPeaks)
focalPeaks %>% mutate(test = paste(samples,sep=','))
focalPeaks %>% mutate(test = paste(list(samples),sep=','))
focalPeaks %>% mutate(test = paste(as_list(samples),sep=','))
focalPeaks %>% mutate(test = paste(as.list(samples),sep=','))
focalPeaks %>% mutate(test = paste(samples[[1]],sep=','))
focalPeaks %>% mutate(test = paste(samples[[2]],sep=','))
focalPeaks %>% mutate(test = map_chr(samples, paste, collapse = ','))
focalPeaks %>% mutate(test = map(samples, paste, collapse = ','))
View(focalPeaks[[3]][[3]])
focalPeaks %>% mutate(test = map_chr(samples$sample, paste, collapse = ','))
focalPeaks %>% mutate(test = paste(samples$sample,collapse = ','))
focalPeaks %>% mutate(test = paste(samples$sample,sep = ','))
focalPeaks %>% mutate(test = paste(samples$sample,sep=','))
focalPeaks %>% mutate(test = paste(as.list(samples$sample),sep=','))
focalPeaks$samples
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
add_tally() %>%
# nest(samples=sample)
mutate(test = paste(sample,sep=','))
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
add_tally() %>%
# nest(samples=sample
group_by(peakID,n) %>%
mutate(test = paste(sample,sep=','))
head(focalPeaks)
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
add_tally() %>%
# nest(samples=sample
group_by(peakID,n) %>%
summarise(test = paste(sample,sep=','))
head(focalPeaks)
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
add_tally() %>%
# nest(samples=sample
group_by(peakID,n) %>%
summarise(test = paste(.$sample,sep=','))
head(focalPeaks)
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
add_tally() %>%
nest(samples=sample)
head(focalPeaks)
focalPeaks %>% mutate(test = map_chr(samples, ~ .[[1]] %>% str_c(collapse = ", ")))
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
add_tally() %>%
nest(sample_nest=sample) %>%
mutate(samples = map_chr(sample_nest, ~ .[[1]] %>% str_c(collapse = ","))) %>%
select(peakID,samples)
head(focalPeaks)
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
add_tally() %>%
nest(sample_nest=sample) %>%
mutate(samples = map_chr(sample_nest, ~ .[[1]] %>% str_c(collapse = "_"))) %>%
select(peakID,samples)
head(focalPeaks)
write_tsv(focalPeaks,'analysis/4_atacseq/peak_regions/_atacPeaks_2orMoreSamples_08.05.21.tsv')
focalPeaks <- mergedPeaks %>%
group_by(peakID) %>%
add_tally() %>%
nest(sample_nest=sample) %>%
mutate(samples = map_chr(sample_nest, ~ .[[1]] %>% str_c(collapse = "_"))) %>%
select(peakID,samples) %>%
separate(peakID,into = c('chr','start','end'),sep = '[_]')
head(focalPeaks)
write_tsv(focalPeaks,'analysis/4_atacseq/peak_regions/_atacPeaks_2orMoreSamples_08.05.21.tsv')
