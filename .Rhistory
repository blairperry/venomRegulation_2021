select(longid=1,id=3, type)
tf.protBinding <- read_tsv('./data/annotation/TF_lists/Cvv_TF.ProtBinding.txt',col_names = F) %>%
mutate(type = 'Protein Binding') %>%
select(longid=1,id=2, type)
tf.coreg <- read_tsv('./data/annotation/TF_lists/Cvv_TF.Coregulators.txt',col_names = F) %>%
mutate(type = 'Coregulator') %>%
select(longid=1,id=2, type)
# Combine all TF tables and add T/F columns for the three types
tf.all <- tf.dnaBinding %>%
bind_rows(tf.protBinding) %>%
bind_rows(tf.coreg) %>%
left_join(longID.to.txID) %>%
select(longid,txid,id) %>%
unique() %>%
mutate(DnaBinding = ifelse(longid %in% tf.dnaBinding$longid,T,F)) %>%
mutate(ProtBinding = ifelse(longid %in% tf.protBinding$longid,T,F)) %>%
mutate(Coregulator = ifelse(longid %in% tf.coreg$longid,T,F))
# write_tsv(tf.all,'./analysis/3_transcription_factors/_functional_characterization/allTFs_withTXIDs_08.03.21.txt')
# write_tsv(as.data.frame(tf.all$id),'./analysis/3_transcription_factors/_functional_characterization/allTFs_forBackground_08.03.21.txt')
# Read in SE-associated genes
se.genes <- read_tsv('./analysis/2_super_enhancers/SEtoGene_Association/Cvv_SEassocPairs_Genes.bed',col_names = F) %>%
mutate(longid = str_split_fixed(X4,'=',3)[,2]) %>%
mutate(longid = str_remove_all(longid,';Name')) %>%
left_join(longID.to.txID)
tf.normCounts <- all.normCounts %>%
filter(txid %in% tf.all$txid) %>%
mutate(Upreg.Ven.vs.NonVen = ifelse(txid %in% Ven.vs.NonVen.up$txid,T,F)) %>%
mutate(SEassociated = ifelse(txid %in% se.genes$txid,T,F)) %>%
left_join(tf.all,by='txid') %>%
select(-longid) %>%
unique()
tf.reformat <- tf.normCounts %>%
select(X1,id.y) %>%
mutate(cvvID = str_split_fixed(X1,'_',2)[,2]) %>%
select(cvvID,tfID = id.y)
seAssoc.TFs <- tf.normCounts %>% filter(SEassociated)
View(tf.normCounts)
allCand.TFs <- tf.normCounts %>% filter(SEassociated | Upreg.Ven.vs.NonVen)
upreg.TFs <- tf.normCounts %>% filter(Upreg.Ven.vs.NonVen)
upreg.TFs.pw <- Ven.vs.NonVen.up %>% filter(X1 %in% upreg.TFs$X1)
write_tsv(allCand.TFs,'analysis/3_transcription_factors/allCandidateTFs_08.03.21.tsv')
library(tidyverse)
stringNet <- read_tsv('./analysis/3_transcription_factors/_functional_characterization/stringdb_ExpCurOnly_08.03.21/string_interactions.tsv') %>% janitor::clean_names()
stringNet.ERKInteractors <- stringNet %>% filter(number_node1 == 'MAPK1' | node2 == 'MAPK1')
ERK.1stDegreeTFs <- union(stringNet.ERKInteractors$number_node1,stringNet.ERKInteractors$node2)
stringNet.AdditionalInteractors <- stringNet %>% filter(number_node1 %in% ERK.1stDegreeTFs | node2 %in% ERK.1stDegreeTFs)
ERK.AllInteractors <- as_tibble(union(union(ERK.1stDegreeTFs,stringNet.AdditionalInteractors$number_node1),stringNet.AdditionalInteractors$node2)) %>%
select(TF=1) %>%
mutate(degree = ifelse(TF %in% ERK.1stDegreeTFs,1,2))
write_tsv(ERK.AllInteractors,'./analysis/3_transcription_factors/_functional_characterization/stringdb_08.03.21/ERK_1st2ndDegreeTFs_08.03.21.tsv')
write_tsv(ERK.AllInteractors,'./analysis/3_transcription_factors/_functional_characterization/stringdb_ExpCurOnly_08.03.21/ERK_1st2ndDegreeTFs_08.03.21.tsv')
stringNet.1st2ndFiltered <- stringNet %>% filter(number_node1 %in% ERK.AllInteractors$TF & node2 %in% ERK.AllInteractors$TF)
write_tsv(stringNet.1st2ndFiltered,'./analysis/3_transcription_factors/_functional_characterization/stringdb_ExpCurOnly_08.03.21/string_interactions.1st2ndDegree.tsv')
library(tidyverse)
library(scico)
setwd("~/Dropbox/CastoeLabFolder/projects/CVV_Gene_Regulation/_VenomGeneRegulation/analyses/transcription_factors/_functional_characterization")
cand_tfs <- read_tsv('./analysis/3_transcription_factors/allCandidateTFs_08.03.21.tsv') %>%
mutate(id = str_remove(id,'\\(var.2\\)'),
id = str_to_upper(id))
cand_tfs <- read_tsv('./analysis/3_transcription_factors/allCandidateTFs_08.03.21.tsv')
View(cand_tfs)
cand_tfs <- read_tsv('./analysis/3_transcription_factors/allCandidateTFs_08.03.21.tsv') %>%
mutate(id = id.y)
erk_interact_all <- read_tsv('./analysis/3_transcription_factors/_functional_characterization/stringdb_ExpCurOnly_08.03.21/ERK_1st2ndDegreeTFs_08.03.21.tsv')
erk_interact_all <- read_tsv('./analysis/3_transcription_factors/_functional_characterization/stringdb_ExpCurOnly_08.03.21/ERK_1st2ndDegreeTFs_08.03.21.tsv') %>%
filter(degree == 1)
View(erk_interact_all)
kegg_path <- read_tsv('./analysis/3_transcription_factors/_functional_characterization/webgestalt_kegg_08.03.21/Project_wg_result1628014729/enrichment_results_wg_result1628014729.txt')
adren_enrich <- kegg_path %>%
filter(str_detect(description,'Adrenergic')) %>%
mutate(tfs = str_split(userId,';')) %>%
unnest(tfs) %>%
select(tfs)
ap1_component <- read_tsv('./analysis/3_transcription_factors/_functional_characterization/stringdb_ExpCurOnly_08.03.21/enrichment.Component.tsv') %>%
filter(str_detect(`term description`,'AP-1')) %>%
mutate(tfs = str_split(`matching proteins in your network (labels)`,',')) %>%
unnest(tfs)
prev_impl <- read_tsv('./analysis/3_transcription_factors/_functional_characterization/TFs_PrevImplicated_wTigris_02.23.21.txt',col_names = 'id')
cand_tfs.interest <- cand_tfs %>%
mutate(prev_implicated = ifelse(id %in% prev_impl$id | id %in% ap1_component$tfs,T,F)) %>%
mutate(erk_interact = ifelse(id %in% erk_interact_1st.list,T,F)) %>%
mutate(adren_path = ifelse(id %in% adren_enrich$tfs,T,F)) %>%
mutate(ap1_complex = ifelse(id %in% ap1_component$tfs,T,F)) %>%
filter(prev_implicated | erk_interact | ap1_complex | adren_path) %>%
select(id,
`Upregulated (RNA-seq)` = upreg,
`SE-Associated (ChIP-seq)` = SEassoc,
`Differentially Bound (ATAC-seq)` = DiffBound,
`Previously implicated in venom regulation` = prev_implicated,
`Interacts with ERK` = erk_interact,
`Adrenoceptor Signaling Pathway`=adren_path,
`AP-1 Complex Member` = ap1_complex) %>%
pivot_longer(-1,names_to = 'feature',values_to='value') %>%
mutate(feature = factor(feature,levels=c("Upregulated (RNA-seq)","SE-Associated (ChIP-seq)","Differentially Bound (ATAC-seq)","Previously implicated in venom regulation","Adrenoceptor Signaling Pathway","AP-1 Complex Member","Interacts with ERK")))
cand_tfs.interest <- cand_tfs %>%
mutate(prev_implicated = ifelse(id %in% prev_impl$id | id %in% ap1_component$tfs,T,F)) %>%
mutate(erk_interact = ifelse(id %in% erk_interact_all$TF,T,F)) %>%
mutate(adren_path = ifelse(id %in% adren_enrich$tfs,T,F)) %>%
mutate(ap1_complex = ifelse(id %in% ap1_component$tfs,T,F)) %>%
filter(prev_implicated | erk_interact | ap1_complex | adren_path) %>%
select(id,
`Upregulated (RNA-seq)` = upreg,
`SE-Associated (ChIP-seq)` = SEassoc,
`Differentially Bound (ATAC-seq)` = DiffBound,
`Previously implicated in venom regulation` = prev_implicated,
`Interacts with ERK` = erk_interact,
`Adrenoceptor Signaling Pathway`=adren_path,
`AP-1 Complex Member` = ap1_complex) %>%
pivot_longer(-1,names_to = 'feature',values_to='value') %>%
mutate(feature = factor(feature,levels=c("Upregulated (RNA-seq)","SE-Associated (ChIP-seq)","Differentially Bound (ATAC-seq)","Previously implicated in venom regulation","Adrenoceptor Signaling Pathway","AP-1 Complex Member","Interacts with ERK")))
View(cand_tfs)
cand_tfs.interest <- cand_tfs %>%
mutate(prev_implicated = ifelse(id %in% prev_impl$id | id %in% ap1_component$tfs,T,F)) %>%
mutate(erk_interact = ifelse(id %in% erk_interact_all$TF,T,F)) %>%
mutate(adren_path = ifelse(id %in% adren_enrich$tfs,T,F)) %>%
mutate(ap1_complex = ifelse(id %in% ap1_component$tfs,T,F)) %>%
filter(prev_implicated | erk_interact | ap1_complex | adren_path) %>%
select(id,
`Upregulated (RNA-seq)` = Upreg.Ven.vs.NonVen,
`SE-Associated (ChIP-seq)` = SEassoc,
`Previously implicated in venom regulation` = prev_implicated,
`Interacts with ERK` = erk_interact,
`Adrenoceptor Signaling Pathway`=adren_path,
`AP-1 Complex Member` = ap1_complex) %>%
pivot_longer(-1,names_to = 'feature',values_to='value') %>%
mutate(feature = factor(feature,levels=c("Upregulated (RNA-seq)","SE-Associated (ChIP-seq)","Differentially Bound (ATAC-seq)","Previously implicated in venom regulation","Adrenoceptor Signaling Pathway","AP-1 Complex Member","Interacts with ERK")))
cand_tfs.interest <- cand_tfs %>%
mutate(prev_implicated = ifelse(id %in% prev_impl$id | id %in% ap1_component$tfs,T,F)) %>%
mutate(erk_interact = ifelse(id %in% erk_interact_all$TF,T,F)) %>%
mutate(adren_path = ifelse(id %in% adren_enrich$tfs,T,F)) %>%
mutate(ap1_complex = ifelse(id %in% ap1_component$tfs,T,F)) %>%
filter(prev_implicated | erk_interact | ap1_complex | adren_path) %>%
select(id,
`Upregulated (RNA-seq)` = Upreg.Ven.vs.NonVen,
`SE-Associated (ChIP-seq)` = SEassociated,
`Previously implicated in venom regulation` = prev_implicated,
`Interacts with ERK` = erk_interact,
`Adrenoceptor Signaling Pathway`=adren_path,
`AP-1 Complex Member` = ap1_complex) %>%
pivot_longer(-1,names_to = 'feature',values_to='value') %>%
mutate(feature = factor(feature,levels=c("Upregulated (RNA-seq)","SE-Associated (ChIP-seq)","Differentially Bound (ATAC-seq)","Previously implicated in venom regulation","Adrenoceptor Signaling Pathway","AP-1 Complex Member","Interacts with ERK")))
cand_tfs.interest %>%
filter(str_detect(feature,'ERK'),value==TRUE)
ggplot(cand_tfs.interest,aes(y=reorder(id,desc(id)),x=feature,fill=feature,alpha=value)) +
geom_point(size=4,show.legend = F,pch=21) +
scale_alpha_manual(values=c('TRUE'=1,'FALSE'=0)) +
scale_fill_scico_d() +
theme_linedraw() +
xlab('') +
ylab('Transcription Factor') +
ggtitle('Subset of Candidate TFs') +
theme(axis.text.x = element_text(angle = 45,hjust = 1),plot.title.position = 'plot', plot.title = element_text(face='bold'),axis.title = element_text(face = 'bold'))
library(pheatmap)
library(viridis)
library(stringr)
library(ggplot2)
library(reshape2)
library(matrixStats)
library(ggrepel)
library(tidyverse)
library(gggenes)
library(patchwork)
library(readxl)
# Read in normalized counts
all.normcounts <- read_csv('./analysis/1_gene_expression/norm_counts/CvvVenomReg_RepRNAseq_wNonVen_VSTNormCounts_08.02.21.csv')
# Read in venom annotation
ven.annot <- read_xlsx('./data/venom_annotation/fullVenomAnnotation_02.20.20.xlsx',col_names = F) %>%
filter(...4 != 'Myotoxin/crotamine')   # excluding this annotation because it is wrong
# Read in pairwise results
ven.vs.nonven <- read_csv('./analysis/1_gene_expression/pairwise_results/cvv_Venom.vs.NonVenom_VG_PairwiseResult_08.02.21.csv') %>%
filter(IHW_pvalue < 0.05) %>%
filter(log2FoldChange > 0) %>%
mutate(txid = str_split_fixed(X1,'_',2)[,2])
# Read in conversion table for simpler venom gene names
ven.nameConvert <- read_tsv('./data/venom_annotation/VenomIDConvert.txt',col_names = c('txid','symbol'))
# Filter norm counts for venom genes
vg.normcounts <- all.normcounts %>%
mutate(txid = str_split_fixed(X1,'[_]',2)[,2]) %>%
filter(txid %in% ven.annot$...6) %>%
left_join(ven.nameConvert) %>%
select(gene=X1,symbol,4,8,9,2,3,5,6,7,10)
vg.1DPEavg <- vg.normcounts %>%
mutate(avg1DPE = rowMeans(vg.normcounts[,3:5])) %>%
select(gene,avg1DPE)
# write_tsv(vg.1DPEavg,'VG_1DPEAvgExpression_08.02.21.tsv')
# Split by venom gene family/group
pla2.normcounts <- vg.normcounts %>% filter(str_detect(gene,'PLA2'))
svmp.normcounts <- vg.normcounts %>% filter(str_detect(gene,'SVMP'))
svsp.normcounts <- vg.normcounts %>% filter(str_detect(gene,'SVSP'))
other.normcounts <- vg.normcounts %>% filter(str_detect(gene,'PLA2|SVMP|SVSP',negate = T)) %>%
filter(gene %in% ven.vs.nonven$X1)
# Format for pheatmap and reorder by exp magnitude
pla2.heatdata <- as.data.frame(pla2.normcounts[,c(-1,-2)])
row.names(pla2.heatdata) <- pla2.normcounts$symbol
pla2.heatdata <- pla2.heatdata[order(pla2.heatdata$ODPE_1,decreasing = T),]
svmp.heatdata <- as.data.frame(svmp.normcounts[,c(-1,-2)])
row.names(svmp.heatdata) <- svmp.normcounts$symbol
svmp.heatdata <- svmp.heatdata[order(svmp.heatdata$ODPE_1,decreasing = T),]
svsp.heatdata <- as.data.frame(svsp.normcounts[,c(-1,-2)])
row.names(svsp.heatdata) <- svsp.normcounts$symbol
svsp.heatdata <- svsp.heatdata[order(svsp.heatdata$ODPE_1,decreasing = T),]
other.heatdata <- as.data.frame(other.normcounts[,c(-1,-2)])
row.names(other.heatdata) <- other.normcounts$symbol
other.heatdata <- other.heatdata[order(other.heatdata$ODPE_1,decreasing = T),]
# Plot heatmaps
breaksList = seq(0, 19, by = .05)
pheatmap(pla2.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(50),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = c(3))
breaksList = seq(0, 19, by = 1)
pheatmap(pla2.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(50),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = c(3))
pheatmap(pla2.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(len(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = c(3))
pheatmap(pla2.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = c(3))
pheatmap(svmp.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = 3)
breaksList = seq(0, 19, by = 0.01)
pheatmap(pla2.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = c(3))
pheatmap(svmp.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = 3)
pheatmap(svsp.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = 3)
pheatmap(other.heatdata,
scale='none',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = 3)
View(vg.normcounts)
breaksList = seq(min(vg.normcounts[,3:11]), 19, by = 0.01)
pheatmap(pla2.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = c(3))
pheatmap(svmp.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = 3)
pheatmap(svsp.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = 3)
pheatmap(other.heatdata,
scale='none',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 20,
treeheight_row = 0,
gaps_col = 3)
CRISP2 <- c('scaffold-ma1',	'169434958',	'169437996',	'Cysteine-rich secretory protein',	'maker-scaffold-ma1-augustus-gene-564.2',	'crovir-transcript-8572',	'CRISP_2')
pri_venom_genes <- read_tsv('./data/venom_annotation/PriorityVenomGenes_08.02.21.txt',col_names = F) %>%
add_row(X1='scaffold-ma1',X2=169434958,X3=169437996,X4='Cysteine-rich secretory protein',X5='maker-scaffold-ma1-augustus-gene-564.2',X6='crovir-transcript-8572',X7='CRISP_2')
exp <- all.normcounts %>%
select(gene=X1,4,8,9,2,3,5,6,7,10) %>%
mutate(avg1DPE = rowMeans(.[,2:4])) %>%
select(gene,avg1DPE) %>%
mutate(txid = str_split_fixed(gene,'[_]',2)[,2]) %>%
filter(txid %in% pri_venom_genes$X6) %>%
left_join(ven.nameConvert)
all_info <- read_tsv('./data/annotation/CroVir_rnd1.all.maker.final.homologIDs.updatedNov2019.GeneEntriesOnly.gff',col_names = F) %>%
filter(str_detect(X9,'trnascan',negate = T)) %>%
mutate(tx_id = str_split_fixed(X9,';',4)[,3]) %>%
mutate(tx_id = str_remove_all(tx_id,'Crovir_Transcript_ID=')) %>%
filter(tx_id %in% pri_venom_genes$X6) %>%
left_join(pri_venom_genes,by=c('tx_id' = 'X6')) %>%
select(molecule = 1, gene = 16, start = 4, end = 5, strand = 7,tx_id) %>%
mutate(strand = ifelse(strand == '+','forward','reverse')) %>%
mutate(direction = ifelse(strand == 'forward',1,-1)) %>%
left_join(exp,by=c('tx_id'='txid')) %>%
mutate(symbol = ifelse(str_detect(symbol,'ADAM28',negate = T),str_replace_all(symbol,'_',' '),symbol)) %>%
mutate(symbol = ifelse(str_detect(symbol,'ADAM28|gIIE'),paste('NVP: ',symbol,sep = ''),symbol))
SVMP <- all_info %>%
filter(str_detect(symbol,'SVMP|ADAM')) %>%
ggplot(aes(xmin = start, xmax = end, y = molecule, forward = direction, fill = avg1DPE)) +
ggrepel::geom_text_repel(data = all_info %>%
filter(str_detect(symbol,'SVMP')) %>%
mutate(start = (start + end)/2),
aes(x = start, y = molecule, label = symbol), inherit.aes = F, nudge_y = 1) +
ggrepel::geom_text_repel(data = all_info %>%
filter(str_detect(symbol,'ADAM')) %>%
mutate(start = (start + end)/2),
aes(x = start, y = molecule, label = symbol), inherit.aes = F, nudge_y = 0.25,nudge_x = 100000) +
geom_gene_arrow(arrowhead_height = unit(3, "mm"), arrowhead_width = unit(2, "mm"),show.legend = T) +
ylab('') +
xlab('') +
scale_fill_viridis_c(option = 'B') +
scale_x_continuous(labels = scales::comma,limits=c(13890000,14495000)) +
theme_genes()
SVMP <- all_info %>%
filter(str_detect(symbol,'SVMP|ADAM')) %>%
ggplot(aes(xmin = start, xmax = end, y = molecule, forward = direction, fill = avg1DPE)) +
ggrepel::geom_text_repel(data = all_info %>%
filter(str_detect(symbol,'SVMP')) %>%
mutate(start = (start + end)/2),
aes(x = start, y = molecule, label = symbol), inherit.aes = F, nudge_y = 1) +
ggrepel::geom_text_repel(data = all_info %>%
filter(str_detect(symbol,'ADAM')) %>%
mutate(start = (start + end)/2),
aes(x = start, y = molecule, label = symbol), inherit.aes = F, nudge_y = 0.25,nudge_x = 100000) +
geom_gene_arrow(arrowhead_height = unit(3, "mm"), arrowhead_width = unit(2, "mm"),show.legend = T) +
ylab('') +
xlab('') +
scale_fill_viridis_c(option = 'B',breaks=breaksList) +
scale_x_continuous(labels = scales::comma,limits=c(13890000,14495000)) +
theme_genes()
SVMP
SVSP <- all_info %>%
filter(str_detect(symbol,'SVSP')) %>%
ggplot(aes(xmin = start, xmax = end, y = molecule, forward = direction, fill = avg1DPE)) +
ggrepel::geom_text_repel(data = all_info %>%
filter(str_detect(symbol,'SVSP')) %>%
mutate(start = (start + end)/2),
aes(x = start, y = molecule, label = symbol), inherit.aes = F, nudge_y = 1) +
geom_gene_arrow(arrowhead_height = unit(3, "mm"), arrowhead_width = unit(2, "mm"),show.legend = F) +
ylab('') +
xlab('') +
scale_fill_viridis_c(option = 'B',breaks=breaksList) +
scale_x_continuous(labels = scales::comma,limits=c(8560000,9000000)) +
theme_genes()
SVSP
# region length (kb)
(9000000 - 8560000) / 1000
PLA2 <- all_info %>%
filter(str_detect(symbol,'PLA2')) %>%
ggplot(aes(xmin = start, xmax = end, y = molecule, forward = direction, fill = avg1DPE)) +
ggrepel::geom_text_repel(data = all_info %>%
filter(str_detect(symbol,'PLA2')) %>%
mutate(start = (start + end)/2),
aes(x = start, y = molecule, label = symbol), inherit.aes = F, nudge_y = 1) +
geom_gene_arrow(arrowhead_height = unit(3, "mm"), arrowhead_width = unit(2, "mm"),show.legend = F) +
ylab('') +
xlab('') +
scale_fill_viridis_c(option = 'B',breaks=breaksList) +
scale_x_continuous(labels = scales::comma,limits=c(3019000,3045000)) +
theme_genes()
PLA2
# region length (kb)
(3045000 - 3019000) / 1000
CRISP <- all_info %>%
filter(str_detect(symbol,'CRISP')) %>%
ggplot(aes(xmin = start, xmax = end, y = molecule, forward = direction, fill = avg1DPE)) +
ggrepel::geom_text_repel(data = all_info %>%
filter(str_detect(symbol,'CRISP')) %>%
mutate(start = (start + end)/2),
aes(x = start, y = molecule, label = symbol), inherit.aes = F, nudge_y = 1) +
geom_gene_arrow(arrowhead_height = unit(3, "mm"), arrowhead_width = unit(2, "mm"),show.legend = F) +
ylab('') +
xlab('') +
scale_fill_viridis_c(option = 'B',breaks=breaksList) +
scale_x_continuous(labels = scales::comma,limits=c(169423000,169439000)) +
theme_genes()
CRISP
SVMP / SVSP / PLA2 / CRISP + plot_layout(guides = 'collect')
pheatmap(other.heatdata,
scale='none',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
cellwidth = 20,cellheight = 10,
treeheight_row = 0,
gaps_col = 3)
pheatmap(other.heatdata,
scale='none',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
fontsize_row = 9,
cellwidth = 20,cellheight = 10,
treeheight_row = 0,
gaps_col = 3)
pheatmap(svsp.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
fontsize_row = 9,
cellwidth = 20,cellheight = 10,
treeheight_row = 0,
gaps_col = 3)
pheatmap(svmp.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
fontsize_row = 9,
cellwidth = 20,cellheight = 10,
treeheight_row = 0,
gaps_col = 3)
pheatmap(pla2.heatdata,
scale='none',
# clustering_distance_rows = 'manhattan',
cluster_cols = F,cluster_rows = F,
col=inferno(length(breaksList)),
breaks = breaksList,
show_rownames = T,
border_color = NA,
fontsize_row = 9,
cellwidth = 20,cellheight = 10,
treeheight_row = 0,
gaps_col = c(3))
